/*
 * Copyright 2009-2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

//===========================================
// Basic
//===========================================

apply plugin:'groovy'

defaultTasks 'clean', 'test', 'dist' // whole tasks

sourceCompatibility = 1.5
baseName = 'groovyserv'

repositories {
    mavenCentral()
    mavenRepo url: [
        "http://repository.codehaus.org",
        "http://snapshots.repository.codehaus.org",
    ]
}

configurations {
    // dependencies for archives are picked at groovy configration
    groovy.extendsFrom archives
}

dependencies {
    groovy 'org.codehaus.groovy:groovy-all:1.8.4'
    groovy 'commons-cli:commons-cli:1.2'
    archives 'net.java.dev.jna:jna:3.2.2'
    testCompile 'junit:junit:4.8.2'
}

def defaultEncoding = 'UTF-8'
compileJava {
    options.encoding = defaultEncoding
}
compileTestJava {
    options.encoding = defaultEncoding
}
compileGroovy {
    groovyOptions.encoding = defaultEncoding
    options.encoding = defaultEncoding
}
compileTestGroovy {
    groovyOptions.encoding = defaultEncoding
    options.encoding = defaultEncoding
}

//===========================================
// Tasks
//===========================================

//----------------------------------
// Build

jar {
    baseName = project.baseName

    // appending the commit id as suffix to the jar file's name of SNAPSHOT
    if (project.version ==~ /.*SNAPSHOT/) {
        def commitId = 'git log --oneline -1 HEAD'.execute().text.split()[0]
        classifier = commitId
    }
}

compileGroovy {
    // This classes is used only by unit tests.
    // Instead, groovy sources in jar are used for integration test.
    destinationDir = file("$buildDir/classes/test")
    classpath += files("$buildDir/classes/main")

    doLast {
        // Groovy sources shouldn't be compiled in order to avoid a trouble
        // of unmatch of Java version between compile-time and runtime.
        copy {
            into "$buildDir/classes/main"
            from "$projectDir/src/main/groovy"
            filter(ReplaceTokens, tokens: ["GROOVYSERV_VERSION": project.version])
        }
    }
}

task compileC << {
    println ">> Compiling C sources..."
    // TODO when deleting pom.xml, make Makefile have DESTDIR=build/native as default
    executeCommand('make', ['-e', 'DESTDIR=build/native', "GROOVYSERV_VERSION=${project.version}"])
}

executablesSpec = copySpec {
    from("$projectDir") {
        include "*.txt"
    }
    into('lib') {
        from configurations.archives
        from "$buildDir/libs"
    }
    into('bin') {
        fileMode = 0755
        from "$buildDir/native/groovyclient"     // ignored if not exists
        from "$buildDir/native/groovyclient.exe" // ignored if not exists
    }
    into('bin') { // scripts with filter
        fileMode = 0755
        from "$projectDir/src/main/bin"
        filter(ReplaceTokens, tokens: ["GROOVYSERV_VERSION": project.version])
    }
}
task executables(type:Copy, dependsOn:['jar', 'compileC']) {
    // construct file tree
    destinationDir = file("$buildDir/executables")
    with executablesSpec

    // to use later
    binDir = "${destinationDir}/bin"
    groovyclientBasePath = convertMixedPath(file("${binDir}/groovyclient"))
    groovyserverPath = convertMixedPath(file("${binDir}/groovyserver"))

    // FIXME it's just a work around because fileMode at Copy task doesn't work.
    // http://issues.gradle.org/browse/GRADLE-971
    doLast {
        ant.chmod(dir:binDir, includes:"*", perm:755)
    }
}

//----------------------------------
// Distribution

task dist(dependsOn:['distBin', 'distSrc'])

task distBin(type:Zip, dependsOn:['jar', 'compileC']) {
    baseName = project.baseName
    classifier = getOsSuffix() + '-bin'
    into "$baseName-$version"
    with executablesSpec
}

srcSpec = copySpec {
    from("$projectDir") {
        include "*.txt"
        include "pom.xml"
        include "build.gradle"
        include "gradle.properties"
        include "Makefile"
    }
    into("src") {
        from "$projectDir/src"
    }
    into("contrib") {
        from "$projectDir/contrib"
    }
    from("$projectDir") {
        fileMode = 0755
        include "gradlew*"
    }
    into("gradle") {
        from "$projectDir/gradle"
    }
}
task distSrc(type:Zip) {
    baseName = project.baseName
    classifier = 'src'
    into "$baseName-$version"
    with srcSpec
}

//----------------------------------
// Test

task test(overwrite:true, dependsOn:['unitTest', 'integrationTest'])

task unitTest(type:Test) {
    include '**/*Test.class'
    testReportDir = file("$buildDir/reports/unit")
    testResultsDir = file("$buildDir/test-results/unit")
}

// integrationTest tasks
integrationTestSpecs = new IntegrationTestSpecFactory(executables.groovyclientBasePath).createSpecs([
    [id:'Java', include:'**/DirectAccessIT.class', exclude:'', always:true],
    [id:'CUnix'],
    [id:'CWin', extension:'.exe'],
    [id:'Ruby', extension:'.rb', invoker:'ruby'],
])
integrationTestSpecs.each { spec ->
    task "${spec.taskName}"(type:Test, dependsOn:'executables') {
        onlyIf { spec.shouldRun() }

        include spec.include
        exclude spec.exclude
        testReportDir = file("$buildDir/reports/integration-${spec.id}")
        testResultsDir = file("$buildDir/test-results/integration-${spec.id}")

        // prop for TestUtils
        systemProperties 'groovyservClientExecutable': spec.executableExpression

        doFirst {
            if (isFirstIntegrationTest()) {
                startGroovyserver()
            }
        }
        doLast {
            if (isLastIntegrationTest()) {
                shutdownGroovyServer()
            }
        }
    }
}
task integrationTest(dependsOn:['executables', integrationTestSpecs*.taskName])

//------------------------
// Gradle wrapper

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-9'
}

//------------------------
// Documents

task docs << {
    executeCommand 'git', ['checkout', 'docs']
    executeCommand 'make', ['clean', 'html']
    executeCommand 'git', ['checkout', 'gh-pages']
    copy {
        into "$projectDir"
        from "$projectDir/build/docs"
    }
}


//===========================================
// Helper
//===========================================

def startGroovyserver() {
    println ">> Starting groovyserver..."
    executeCommand("sh", ['-c', "${executables.groovyserverPath} -r -v"])
}

def shutdownGroovyServer() {
    println ">> Shutting down groovyserver..."
    executeCommand("sh", ['-c', "${executables.groovyserverPath} -k"])
}

def getOsSuffix() {
    def osName = System.properties['os.name'].replaceAll(/ /, '').toLowerCase()
    def osArch = System.properties['os.arch']
    return "${osName}-${osArch}"
}

def executeCommand(command, arguments) {
    println ">> Executing command..."
    println "\$ $command ${arguments.join(' ')}"
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = command
            args = arguments
            standardOutput = os
        }
        println os.toString()
    }
}

def isFirstIntegrationTest() {
    def allIntTestTasks = gradle.taskGraph.allTasks.findAll{ it.name =~ /^integrationTestFor.+/ }
    return allIntTestTasks.findAll{ !it.state.skipped }.every { !it.state.executed }
}

def isLastIntegrationTest() {
    def allIntTestTasks = gradle.taskGraph.allTasks.findAll{ it.name =~ /^integrationTestFor.+/ }
    return allIntTestTasks.every { it.state.executed || it.state.executing }
}

def convertMixedPath(File file) {
    file.canonicalPath.replaceAll('\\\\', '/')
}

class IntegrationTestSpecFactory {
    def clientBasePath

    def IntegrationTestSpecFactory(path) {
        clientBasePath = path
    }
    def createSpecs(list) {
        list.collect { map ->
            map.clientBasePath = clientBasePath
            map as IntegrationTestSpec
        }
    }
}

class IntegrationTestSpec {
    def id
    def extension = ''
    def invoker
    def clientBasePath
    def include = '**/*IT.class'
    def exclude = '**/DirectAccessIT.class'
    def always = false

    def getGroovyclientPath() {
        clientBasePath + extension
    }
    def getExecutableExpression() {
        (invoker ? "$invoker " : '') + getGroovyclientPath()
    }
    def getTaskName() {
        "integrationTestFor" + id
    }
    def shouldRun() {
        always || new File(getGroovyclientPath()).exists()
    }
}

