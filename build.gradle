/*
 * Copyright 2009-2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//===========================================
// Basic
//===========================================

apply plugin:'groovy'

defaultTasks 'clean', 'build'
sourceCompatibility = 1.5
baseName = 'groovyserv'

repositories {
    mavenCentral()
    mavenRepo urls: [
        "http://repository.codehaus.org",
        "http://snapshots.repository.codehaus.org",
    ]
}

configurations {
    // dependencies for archives are picked at groovy configration
    groovy.extendsFrom archives
}

dependencies {
    groovy 'org.codehaus.groovy:groovy-all:1.7.10'
    groovy 'commons-cli:commons-cli:1.2'
    archives 'net.java.dev.jna:jna:3.2.2'
    testCompile 'junit:junit:4.8.2'
}

//===========================================
// Tasks
//===========================================

//------------------------
// Default tasks

jar {
    baseName = project.baseName
}

test {
    dependsOn 'unitTest', 'integrationTest'
    scanForTestClasses = false
}

//------------------------
// My tasks

task compileC << {
    println ">> Compiling C sources..."
    executeCommand('make', ['-e', 'DESTDIR=build']) // TODO when deleting pom.xml, make Makefile have DESTDIR=build as default
}

task prepareBin(type:Copy, dependsOn:['jar', 'compileC']) {
    // construct file tree
    destinationDir = file("$buildDir/${project.baseName}-$version")
    from("$projectDir") {
        include "*.txt"
    }
    into('lib') {
        from configurations.archives
        from "$buildDir/libs"
    }
    into('bin') {
        from "src/main/bin"
        from "$buildDir/groovyclient"     // ignored if not exists
        from "$buildDir/groovyclient.exe" // ignored if not exists
    }

    // to use later
    binDir = "${destinationDir}/bin"
    groovyclientBasePath = convertMixedPath(file("${binDir}/groovyclient"))
    groovyserverPath = convertMixedPath(file("${binDir}/groovyserver"))

    // add execute permission
    doLast {
        file(binDir).eachFile { bin ->
            ant.chmod(file:bin, perm:755)
        }
    }
}

task distBin(type:Zip, dependsOn:'prepareBin') {
    baseName = project.baseName
    classifier = getOsSuffix() + '-bin'
    into "$baseName-$version"
    from prepareBin.destinationDir
}

task distSrc(type:Zip) {
    baseName = project.baseName
    classifier = 'src'
    into "$baseName-$version"
    from("$projectDir") {
        include "*.txt"
        include "pom.xml"
        include "build.gradle"
        include "gradle.properties"
        include "Makefile"
    }
    into("src") {
        from "src"
    }
}

task dist {
    dependsOn 'distBin', 'distSrc'
}

task unitTest(type:Test) {
    include '**/*Test.class'
}

// integrationTest tasks
integrationTestTargets = new IntegrationTestTargetFactory(prepareBin.groovyclientBasePath).createTargets([
    [id:'Java', include:'**/DirectAccessIT.class', exclude:'', always:true],
    [id:'CUnix'],
    [id:'CWin', extension:'.exe'],
    [id:'Ruby', extension:'.rb', invoker:'ruby'],
])
integrationTestTargets.each { target ->
    task "${target.taskName}"(type:Test) {
        dependsOn 'prepareBin'

        onlyIf { target.shouldRun() }

        include target.include
        exclude target.exclude
        testReportDir = file("$buildDir/reports/${target.id}")
        testResultsDir = file("$buildDir/results/${target.id}")

        // prop for TestUtils
        systemProperties 'groovyservClientExecutable': target.executableExpression

        doFirst {
            if (isFirstIntegrationTest()) {
                startGroovyserver()
            }
        }
        doLast {
            if (isLastIntegrationTest()) {
                shutdownGroovyServer()
            }
        }
    }
}
task integrationTest {
    dependsOn 'prepareBin', integrationTestTargets*.taskName
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-3'
}

//===========================================
// Helper
//===========================================

def startGroovyserver() {
    println ">> Starting groovyserver..."
    executeCommand("sh", ['-c', "${prepareBin.groovyserverPath} -r -v"])
}

def shutdownGroovyServer() {
    println ">> Shutdowning groovyserver..."
    executeCommand("sh", ['-c', "${prepareBin.groovyserverPath} -k"])
}

def getOsSuffix() {
    def osName = System.properties['os.name'].replaceAll(/ /, '').toLowerCase()
    def osArch = System.properties['os.arch']
    return "${osName}-${osArch}"
}

def executeCommand(command, arguments) {
    println ">> Executing command..."
    println "\$ $command ${arguments.join(' ')}"
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = command
            args = arguments
            standardOutput = os
        }
        println os.toString()
    }
}

def isFirstIntegrationTest() {
    def allIntTestTasks = gradle.taskGraph.allTasks.findAll{ it.name =~ /^integrationTest.+/ }
    return allIntTestTasks.findAll{ !it.state.skipped }.every { !it.state.executed }
}

def isLastIntegrationTest() {
    def allIntTestTasks = gradle.taskGraph.allTasks.findAll{ it.name =~ /^integrationTest.+/ }
    return allIntTestTasks.every { it.state.executed || it.state.executing }
}

def convertMixedPath(File file) {
    file.canonicalPath.replaceAll('\\\\', '/')
}

class IntegrationTestTargetFactory {
    def clientBasePath

    def IntegrationTestTargetFactory(path) {
        clientBasePath = path
    }
    def createTargets(list) {
        list.collect { map ->
            map.clientBasePath = clientBasePath
            map as IntegrationTestTarget
        }
    }
}

class IntegrationTestTarget {
    def id
    def extension = ''
    def invoker
    def clientBasePath
    def include = '**/*IT.class'
    def exclude = '**/DirectAccessIT.class'
    def always = false

    def getGroovyclientPath() {
        clientBasePath + extension
    }
    def getExecutableExpression() {
        (invoker ? "$invoker " : '') + getGroovyclientPath()
    }
    def getTaskName() {
        "integrationTest" + id
    }
    def shouldRun() {
        always || new File(getGroovyclientPath()).exists()
    }
}

