GroovyServ 0.1 README
March 9th, 2010

==============
Introduction
==============

GroovyServ make startup time quicker, by pre-invoking groovy as a TCP/IP
server. (If you know gnuserv/gnuclient, this is like that.)

For writing script, for example by using groovy, quick response is very
important. Because it has less static type checking, try-and-run loop
is repeated frequently. Sometimes 2 seconds or even a second might be
intolerable.

By using GroovyServ, you can make shorten the invocation time of groovy
significantly. Followings are time of invocation (in Mac Windows XP
Core(TM) 2 Duo 2GHz, average of 3 times).

  groovy command(non native)   2.32 (sec)
  groovy command(native exe)   0.90 (sec)
  groovyclient                 0.10 (sec)


==============
Requirements
==============

GroovyServ is developed for follwing environment/OS. Please report if it
runs on the others.

  - Windows XP + cygwin
  - Mac OS X 10.5/6 (Intel Mac)
  - Ubuntu Linux 9.10

Version of Groovy is following:

  - Groovy 1.6 or later

==========
Language
==========

The Server is written in Java with JNA(Java Native Access).  There are
two types of clients, one is written in C and another is written in Ruby.

==========
Security
==========

GroovyServ has a possibility to run any groovy script from client.
So server-client connection is limited to the connection from the same
machine (localhost). And the connection is authenticated by simple
cookie mechanism. The cookie file is stored at ~/.groovy/groovyserv/key
and the file mode set to 0400. But in Windows environment, it is not
effective. So appropriately protect access to the file in Windows if
needed.

=============================
Install from binary package
=============================

Download and expand GroovyServ distribution package

  groovyserv-0.1-win32-bin.zip

or 

  groovyserv-0.1-MacOSX-x86_64-bin.zip

to any directory. For example:

  > mkdir ~/opt
  > cd ~/opt
  > unzip groovyserv-0.1-win32-bin.zip

and add bin directory to PATH environment variable.
For example in bash/bourne shell:

  export PATH=~/opt/groovyserv-0.1/bin:$PATH

That's all for preparing. When you invoke groovyclient, groovyserver
automatically starts in background. At first, you might have to wait
for a few seconds to startup.

  > groovyclient -v
  starting server..
  Groovy Version: 1.7.0 JVM: 1.6.0_13

========================
Build from source code
========================

Download and expand GroovyServ source package groovyserv-0.1-src.zip
to any directory. For example:

  > mkdir -p ~/opt/src
  > cd ~/opt/src
  > unzip groovyserv-0.1-src.zip

Build with Maven2 as follows:

  > cd ~/opt/src/groovyserv-0.1/
  > mvn clean assembly:assembly

then some zip files will be generated. According to "Install from
binary package", install the bin package.

  ~/opt/src/groovyserv-0.1/target/groovyserv-0.1-<OS>-<arch>-bin.zip

If some tests fail, you can skip tests following.

  > mvn -Dmaven.test.skip=true clean assembly:assembly

============
How to use
============

You can use 'groovyclient' command as a replacement of 'groovy' command.
If the server is not running, it starts automatically. You can invoke it
explicitly.

  > groovyserver

About groovyserver command options refer to "groovyserver options".

=========================
Restriction/Differences
=========================

* You can't concurrently use different current directory on a server.
  If you execute the following,

  > groovyclient ... | (cd /tmp; groovyclient ... ) 

  the following exception is occured:

    org.jggug.kobo.groovyserv.GroovyServException: Can't change current
    directory because of another session running on different dir: ...

  It also meets conditions if you invoke groovyclient simultaneously
  from two or more consoles. But if the running periods of each
  groovyclient are not overlapping, it is no problem.

  If needed, you can run multiple groovy server for separated port.

* A static variable is shared among groovy program executing.
  For instance, the system property is shared.

 > groovy -e "System.setProperty('a','abc')"
 > groovy -e "println System.getProperty('a')"
 abc

* Environment variables of when not groovyclient but groovyserver is
  invoked are used. If you want to apply new environment variables to
  running groovyserver process, you must restart the server.  

  > groovyserver -r

  But only about CLASSPATH variable, a value in groovyclient is effective.

* Values of Groovy's -cp option and CLASSPATH variable are passed to the
  server and added/overwrote to environment variables of the server
  process. But it is only to add, never to remove.

======================
groovyserver options
======================

Options are as follows:

  -v verbose output. print debugging information etc.
  -q quiet.(default)
  -k kill the running groovyserver.
  -r restart groovyserver.
  -p <port> specify the port for groovyserver.

=============
Port number
=============

To change the port number which groovyserver uses, you can use
GROOVYSERVER_PORT environment variable instead of -p option.

  > export GROOVYSERVER_PORT=1963

groovyclient uses GROOVYSERVER_PORT variable in default. But you can
specify port number by -p option of groovyclient. In groovyclient, -p
option is treated priorer than GROOVYSERVER_PORT environment variable.

==========
Log file
==========

The output from groovyserver are logged to:

  ~/.groovy/groovyserver/<Process ID>-<Port Number>.log

======
Tips
======

Following aliases might be useful.

  alias groovy=groovyclient
  alias groovyc="groovyclient -e 'org.codehaus.groovy.tools.FileSystemCompiler.main(args)'"
  alias groovysh="groovyclient -e 'groovy.ui.InteractiveShell.main(args)'"
  alias groovyConsole="groovyclient -e 'groovy.ui.Console.main(args)'"

=========
Support
=========

http://kobo.github.com/groovyserv/

=========
License
=========

Apache License Version 2.0

==============
Presented by
==============

Kobo Project.
NTT Software Corp.

